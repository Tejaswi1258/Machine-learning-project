# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lpovPPQ6Blsk_ne6aUfIBYu17jcZbRNS
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score
from imblearn.over_sampling import SMOTE

# -------------------------------
# Load the dataset
# -------------------------------
data = pd.read_csv('/content/loan_approval_dataset_500.csv')

# Data Preprocessing
data.columns = data.columns.str.strip()  # Remove extra spaces from column names
data = data.drop('loan_id', axis=1)     # Drop 'loan_id' as it's not predictive

# Strip spaces from categorical columns
data['education'] = data['education'].str.strip()
data['self_employed'] = data['self_employed'].str.strip()
data['loan_status'] = data['loan_status'].str.strip()

# Encode categorical variables
le_education = LabelEncoder()
le_self_employed = LabelEncoder()
le_loan_status = LabelEncoder()

data['education'] = le_education.fit_transform(data['education'])
data['self_employed'] = le_self_employed.fit_transform(data['self_employed'])
data['loan_status'] = le_loan_status.fit_transform(data['loan_status'])

# Define features and target
X = data.drop('loan_status', axis=1)
y = data['loan_status']

# Handle class imbalance using SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(
    X_resampled, y_resampled, test_size=0.2, random_state=42
)

# Scale numerical features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Decision Tree model
model = DecisionTreeClassifier(max_depth=5, min_samples_split=10, min_samples_leaf=5, random_state=42)
model.fit(X_train_scaled, y_train)

# Calculate and display accuracy
y_pred = model.predict(X_test_scaled)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

# Visualize the Decision Tree
plt.figure(figsize=(20, 10))  # Adjust figure size as needed
plot_tree(model,
          feature_names=X_train.columns.tolist(),
          class_names=le_loan_status.inverse_transform([0, 1]).tolist(),
          filled=True,
          rounded=True,
          fontsize=8)
plt.show()

# -------------------------------
# Function to predict loan status
# -------------------------------
def predict_loan_status():
    print("\nEnter the following details for loan prediction:")

    # Take inputs and strip whitespace
    try:
        no_of_dependents = int(input("Number of dependents (0-5): ").strip())
        education_input = input("Education (Graduate/Not Graduate): ").strip()
        self_employed_input = input("Self Employed (Yes/No): ").strip()
        income_annum = float(input("Annual Income: ").strip())
        loan_amount = float(input("Loan Amount: ").strip())
        loan_term = int(input("Loan Term (in years): ").strip())
        cibil_score = int(input("CIBIL Score (300-900): ").strip())
        residential_assets_value = float(input("Residential Assets Value: ").strip())
        commercial_assets_value = float(input("Commercial Assets Value: ").strip())
        luxury_assets_value = float(input("Luxury Assets Value: ").strip())
        bank_asset_value = float(input("Bank Asset Value: ").strip())
    except ValueError:
        print("Invalid input type! Please enter numeric values where required.")
        return

    # Prepare input data
    input_data = pd.DataFrame({
        'no_of_dependents': [no_of_dependents],
        'education': [education_input],
        'self_employed': [self_employed_input],
        'income_annum': [income_annum],
        'loan_amount': [loan_amount],
        'loan_term': [loan_term],
        'cibil_score': [cibil_score],
        'residential_assets_value': [residential_assets_value],
        'commercial_assets_value': [commercial_assets_value],
        'luxury_assets_value': [luxury_assets_value],
        'bank_asset_value': [bank_asset_value]
    })

    # Map categorical inputs safely
    if education_input not in le_education.classes_:
        print(f"Invalid Education value! Allowed: {list(le_education.classes_)}")
        return
    if self_employed_input not in le_self_employed.classes_:
        print(f"Invalid Self Employed value! Allowed: {list(le_self_employed.classes_)}")
        return

    input_data['education'] = le_education.transform([education_input])[0]
    input_data['self_employed'] = le_self_employed.transform([self_employed_input])[0]

    # Scale input data
    input_scaled = scaler.transform(input_data)

    # Predict
    prediction = model.predict(input_scaled)
    result = le_loan_status.inverse_transform(prediction)[0]
    print(f"\nPrediction: The loan is {result}")

# Run prediction
predict_loan_status()

"""**LOAN APPROVED TEST CASES**

TEST-CASE-1:
-----------

Number of dependents (0-5): 1

Education (Graduate/Not Graduate): Graduate

Self Employed (Yes/No): No

Annual Income: 120000

Loan Amount: 50000

Loan Term (in years): 5

CIBIL Score (300-900): 750

Residential Assets Value: 100000

Commercial Assets Value: 50000

Luxury Assets Value: 20000

Bank Asset Value: 30000


TEST-CASE:2
-----------

Number of dependents (0-5): 0

Education (Graduate/Not Graduate): Graduate

Self Employed (Yes/No): No

Annual Income: 150000

Loan Amount: 40000

Loan Term (in years): 4

CIBIL Score (300-900): 780

Residential Assets Value: 120000

Commercial Assets Value: 60000

Luxury Assets Value: 25000

Bank Asset Value: 50000

**LOAN REJECTED TEST CASES**

TEST-CASE-1:
-----------

Number of dependents (0-5): 3

Education (Graduate/Not Graduate): Not Graduate

Self Employed (Yes/No): Yes

Annual Income: 20000

Loan Amount: 100000

Loan Term (in years): 10

CIBIL Score (300-900): 450

Residential Assets Value: 10000

Commercial Assets Value: 5000

Luxury Assets Value: 2000

Bank Asset Value: 1000



TEST-CASE:2
------------

Number of dependents (0-5): 2

Education (Graduate/Not Graduate): Not Graduate

Self Employed (Yes/No): Yes

Annual Income: 25000

Loan Amount: 90000

Loan Term (in years): 8

CIBIL Score (300-900): 480

Residential Assets Value: 12000

Commercial Assets Value: 8000

Luxury Assets Value: 3000

Bank Asset Value: 1500
"""
